// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/01/DMux8Way.hdl
/**
 * 8-way demultiplexor:
 * [a, b, c, d, e, f, g, h] = [in, 0, 0, 0, 0, 0, 0, 0] if sel == 000
 *                            [0, in, 0, 0, 0, 0, 0, 0] if sel == 001
 *                            ...
 *                            [0, 0, 0, 0, 0, 0, 0, in] if sel == 111
 */
CHIP DMux8Way {
    IN in, sel[3];
    OUT a, b, c, d, e, f, g, h;

    PARTS:
    Not(in=sel[0], out=notsel0);
    Not(in=sel[1], out=notsel1);
    Not(in=sel[2], out=notsel2);

    // Intermediate results for the first two bits left->right, eg 00 in 001
    And(a=notsel2, b=notsel1, out=and00);
    And(a=sel[2], b=notsel1, out=and10);
    And(a=notsel2, b=sel[1], out=and01);
    And(a=sel[2], b=sel[1], out=and11);

    // Selectors for all three bit combinations
    And(a=and00, b=notsel0, out=sel000);
    And(a=and00, b=sel[0], out=sel001);
    And(a=and01, b=notsel0, out=sel010);
    And(a=and01, b=sel[0], out=sel011);
    And(a=and10, b=notsel0, out=sel100);
    And(a=and10, b=sel[0], out=sel101);
    And(a=and11, b=notsel0, out=sel110);
    And(a=and11, b=sel[0], out=sel111);

    // Do the work
    And(a=in, b=sel000, out=a);
    And(a=in, b=sel001, out=b);
    And(a=in, b=sel010, out=c);
    And(a=in, b=sel011, out=d);
    And(a=in, b=sel100, out=e);
    And(a=in, b=sel101, out=f);
    And(a=in, b=sel110, out=g);
    And(a=in, b=sel111, out=h);
}